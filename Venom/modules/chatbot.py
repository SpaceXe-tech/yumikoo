import random
import logging
from Abg.chat_status import adminsOnly
from pymongo import MongoClient
from pyrogram import filters, Client
from pyrogram.enums import ChatAction
from pyrogram.types import InlineKeyboardMarkup, Message
from config import MONGO_URL, OWNER_ID, SUDO_IDS
from Venom import VenomX
from Venom.modules.helpers import CHATBOT_ON, is_admins

# Configure logging
logging.basicConfig(level=logging.ERROR)
logger = logging.getLogger(__name__)

# Authorized users for restricted commands
AUTHORIZED_USERS = set([OWNER_ID] + SUDO_IDS)

@VenomX.on_cmd("chatbot", group_only=True)
@adminsOnly("can_delete_messages")
async def chaton_(_, m: Message):
    try:
        await m.reply_text(
            f"·¥Ñ ú·¥Ä·¥õ: {m.chat.title}\n**·¥Ñ ú·¥è·¥ès·¥á ·¥Ä…¥ ·¥è·¥©·¥õ…™·¥è…¥ ·¥õ·¥è ·¥á…¥·¥Ä ô ü·¥á/·¥Ö…™s·¥Ä ô ü·¥á  è·¥ú·¥ã…™·¥õ·¥Äüíê ·¥Ñ ú·¥Ä·¥õ- ô·¥è·¥õ.**",
            reply_markup=InlineKeyboardMarkup(CHATBOT_ON),
        )
    except Exception as e:
        logger.error(f"Error in chaton_: {e}")
        await m.reply_text("A…¥ ·¥á Ä Ä·¥è Ä ·¥è·¥Ñ·¥Ñ·¥ú Ä·¥á·¥Ö ·¥° ú…™ ü·¥á ·¥Ä·¥Ñ·¥õ…™·¥†·¥Ä·¥õ…™…¥…¢ ·¥Ñ ú·¥Ä·¥õ ô·¥è·¥õ. P ü·¥á·¥Äs·¥á ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥ ·¥Ä“ì·¥õ·¥á Ä 5 ·¥ç…™…¥·¥ú·¥õ·¥ás.")
    return

@VenomX.on_cmd("rms", group_only=True)
async def remove_sticker_replies(_: Client, m: Message):
    chatdb = None
    try:
        if m.from_user.id not in AUTHORIZED_USERS:
            await m.reply_text("‚ö†Ô∏è  è·¥è·¥ú ·¥Ä Ä·¥á …¥·¥è·¥õ ·¥Ä·¥ú·¥õ ú·¥è Ä…™·¥¢·¥á·¥Ö ·¥õ·¥è ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö. ·¥è…¥ ü è ·¥õ ú·¥á ·¥è·¥°…¥·¥á Ä ·¥è Ä s·¥ú·¥Ö·¥è·¥á Äs ·¥Ñ·¥è·¥ú ü·¥Ö ·¥ús·¥á /rms ·¥Ñ·¥ç·¥Ö.")
            return
        chatdb = MongoClient(MONGO_URL)
        chatai = chatdb["Word"]["WordDb"]
        deleted = chatai.delete_many({"check": "sticker"}).deleted_count
        await m.reply_text(f"R·¥á·¥ç·¥è·¥†·¥á·¥Ö {deleted}  ü·¥á·¥Ä Ä…¥·¥á·¥Ö s·¥õ…™·¥Ñ·¥ã·¥á Ä  Ä·¥á·¥ò ü…™·¥ás “ì Ä·¥è·¥ç ·¥ç è ·¥Ö·¥Ä·¥õ·¥Ä ô·¥Äs·¥á.")
    except Exception as e:
        logger.error(f"Error in remove_sticker_replies: {e}")
        await m.reply_text("·¥Ä…¥ ·¥á Ä Ä·¥è Ä ·¥è·¥Ñ·¥Ñ·¥ú Ä·¥á·¥Ö ·¥° ú…™ ü·¥á  Ä·¥á·¥ç·¥è·¥†…™…¥…¢ s·¥Ä·¥†·¥á·¥Ö s·¥õ…™·¥Ñ·¥ã·¥á Ä  Ä·¥á·¥ò ü…™·¥ás.")
    finally:
        if chatdb:
            chatdb.close()

@VenomX.on_cmd("rmm", group_only=True)
async def remove_message_replies(_: Client, m: Message):
    chatdb = None
    try:
        if m.from_user.id not in AUTHORIZED_USERS:
            await m.reply_text("‚ö†Ô∏è  è·¥è·¥ú ·¥Ä Ä·¥á …¥·¥è·¥õ ·¥Ä·¥ú·¥õ ú·¥è Ä…™·¥¢·¥á·¥Ö ·¥õ·¥è ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö. ·¥è…¥ ü è ·¥õ ú·¥á ·¥è·¥°…¥·¥á Ä ·¥è Ä s·¥ú·¥Ö·¥è·¥á Äs ·¥Ñ·¥è·¥ú ü·¥Ö ·¥ús·¥á /rmm ·¥Ñ·¥ç·¥Ö.")
            return
        chatdb = MongoClient(MONGO_URL)
        chatai = chatdb["Word"]["WordDb"]
        deleted = chatai.delete_many({"check": {"$in": ["text", "none"]}}).deleted_count
        await m.reply_text(f"·¥†·¥Ä…¥…™s ú·¥á·¥Ö {deleted}  ü·¥á·¥Ä Ä…¥·¥á·¥Ö ·¥ç·¥áss·¥Ä…¢·¥á  Ä·¥á·¥ò ü…™·¥ás “ì Ä·¥è·¥ç ·¥ç è ·¥ç·¥á·¥ç·¥è Ä è.")
    except Exception as e:
        logger.error(f"Error in remove_message_replies: {e}")
        await m.reply_text("·¥Ä…¥ ·¥á Ä Ä·¥è Ä ·¥è·¥Ñ·¥Ñ·¥ú Ä·¥á·¥Ö ·¥° ú…™ ü·¥á  Ä·¥á·¥ç·¥è·¥†…™…¥…¢ s·¥Ä·¥†·¥á·¥Ö ·¥ç·¥áss·¥Ä…¢·¥á  Ä·¥á·¥ò ü…™·¥ás.")
    finally:
        if chatdb:
            chatdb.close()

@VenomX.on_cmd("clear", group_only=True)
async def clear_all_replies(_: Client, m: Message):
    chatdb = None
    try:
        if m.from_user.id not in AUTHORIZED_USERS:
            await m.reply_text("‚ö†Ô∏è  è·¥è·¥ú ·¥Ä Ä·¥á …¥·¥è·¥õ ·¥Ä·¥ú·¥õ ú·¥è Ä…™·¥¢·¥á·¥Ö ·¥õ·¥è ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö. ·¥è…¥ ü è ·¥õ ú·¥á ·¥è·¥°…¥·¥á Ä ·¥è Ä s·¥ú·¥Ö·¥è·¥á Äs ·¥Ñ·¥è·¥ú ü·¥Ö ·¥ús·¥á /clear ·¥Ñ·¥ç·¥Ö.")
            return
        chatdb = MongoClient(MONGO_URL)
        chatai = chatdb["Word"]["WordDb"]
        deleted = chatai.delete_many({}).deleted_count
        await m.reply_text(f"s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è üçÉ ·¥†·¥Ä…¥…™s ú·¥á·¥Ö ·¥Ä ü ü {deleted}  ü·¥á·¥Ä Ä…¥·¥á·¥Ö  Ä·¥á·¥ò ü…™·¥ás “ì Ä·¥è·¥ç ·¥ç è ·¥ç·¥á·¥ç·¥è Ä…™·¥ás.")
    except Exception as e:
        logger.error(f"Error in clear_all_replies: {e}")
        await m.reply_text("·¥Ä…¥ ·¥á Ä Ä·¥è Ä ·¥è·¥Ñ·¥Ñ·¥ú Ä·¥á·¥Ö ·¥° ú…™ ü·¥á  Ä·¥á·¥ç·¥è·¥†…™…¥…¢ ·¥Ä ü ü  ü·¥á·¥Ä Ä…¥·¥á·¥Ö  Ä·¥á·¥ò ü…™·¥ás.")
    finally:
        if chatdb:
            chatdb.close()

@VenomX.on_cmd("rem", group_only=True)
async def remove_specific_reply(_: Client, m: Message):
    chatdb = None
    try:
        if m.from_user.id not in AUTHORIZED_USERS:
            await m.reply_text("‚ö†Ô∏è  è·¥è·¥ú ·¥Ä Ä·¥á …¥·¥è·¥õ ·¥Ä·¥ú·¥õ ú·¥è Ä…™·¥¢·¥á·¥Ö ·¥õ·¥è ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö. ·¥è…¥ ü è ·¥õ ú·¥á ·¥è·¥°…¥·¥á Ä ·¥è Ä s·¥ú·¥Ö·¥è·¥á Äs ·¥Ñ·¥è·¥ú ü·¥Ö ·¥ús·¥á /rem ·¥Ñ·¥ç·¥Ö.")
            return
        if not m.reply_to_message:
            await m.reply_text("·¥ò ü·¥á·¥Äs·¥á  Ä·¥á·¥ò ü è ·¥õ·¥è ·¥õ ú·¥á ·¥ç·¥áss·¥Ä…¢·¥á ·¥è Ä s·¥õ…™·¥Ñ·¥ã·¥á Ä  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è  Ä·¥á·¥ç·¥è·¥†·¥á “ì Ä·¥è·¥ç ·¥ç è  ü·¥á·¥Ä Ä…¥·¥á·¥Ö ·¥Ñ ú·¥Ä·¥õ  Ä·¥á·¥ò ü…™·¥ás.")
            return
        chatdb = MongoClient(MONGO_URL)
        chatai = chatdb["Word"]["WordDb"]
        if m.reply_to_message.text:
            deleted = chatai.delete_one({"text": m.reply_to_message.text}).deleted_count
        elif m.reply_to_message.sticker:
            deleted = chatai.delete_one({"text": m.reply_to_message.sticker.file_id}).deleted_count
        else:
            await m.reply_text("U…¥s·¥ú·¥ò·¥ò·¥è Ä·¥õ·¥á·¥Ö  Ä·¥á·¥ç·¥è·¥†·¥Ä ü ·¥õ è·¥ò·¥á.  Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä ·¥õ·¥áx·¥õ ·¥ç·¥áss·¥Ä…¢·¥á ·¥è Ä s·¥õ…™·¥Ñ·¥ã·¥á Ä.")
            return
        if deleted > 0:
            await m.reply_text("·¥†·¥Ä…¥…™s ú·¥á·¥Ö ·¥õ ú·¥á  ü·¥á·¥Ä Ä…¥·¥á·¥Ö  Ä·¥á·¥ò ü è “ì Ä·¥è·¥ç ·¥ç è ·¥Ö·¥Ä·¥õ·¥Ä ô·¥Äs·¥á.")
        else:
            await m.reply_text("…¥·¥è ·¥ç·¥Ä·¥õ·¥Ñ ú…™…¥…¢  ü·¥á·¥Ä Ä…¥·¥á·¥Ö s·¥Ä·¥†·¥á·¥Ö  Ä·¥á·¥ò ü…™·¥ás “ì·¥è·¥ú…¥·¥Ö s·¥è “ì·¥Ä Ä …™…¥ ·¥ç è ·¥ç·¥á·¥ç·¥è Ä è.")
    except Exception as e:
        logger.error(f"Error in remove_specific_reply: {e}")
        await m.reply_text("·¥Ä…¥ ·¥á Ä Ä·¥è Ä ·¥è·¥Ñ·¥Ñ·¥ú Ä·¥á·¥Ö ·¥° ú…™ ü·¥á  Ä·¥á·¥ç·¥è·¥†…™…¥…¢ ·¥õ ú·¥á s·¥ò·¥á·¥Ñ…™“ì…™·¥Ñ  ü·¥á·¥Ä Ä…¥·¥á·¥Ö  Ä·¥á·¥ò ü…™·¥ás.")
    finally:
        if chatdb:
            chatdb.close()

@VenomX.on_message(
    (filters.text | filters.sticker | filters.group) & ~filters.private & ~filters.bot, group=4
)
async def chatbot_text(client: Client, message: Message):
    chatdb = None
    vickdb = None
    try:
        if message.text and (
            message.text.startswith("!") or
            message.text.startswith("/") or
            message.text.startswith("?") or
            message.text.startswith("@") or
            message.text.startswith("#")
        ):
            return
        chatdb = MongoClient(MONGO_URL)
        chatai = chatdb["Word"]["WordDb"]
        vickdb = MongoClient(MONGO_URL)
        vick = vickdb["VickDb"]["Vick"]
        is_vick = vick.find_one({"chat_id": message.chat.id})

        if not is_vick:
            if not message.reply_to_message:
                await client.send_chat_action(message.chat.id, ChatAction.TYPING)
                K = []
                is_chat = chatai.find({"word": message.text})
                k = chatai.find_one({"word": message.text})
                if k:
                    for x in is_chat:
                        K.append(x["text"])
                    hey = random.choice(K)
                    is_text = chatai.find_one({"text": hey})
                    Yo = is_text["check"]
                    if Yo == "sticker":
                        await message.reply_sticker(f"{hey}")
                    else:
                        await message.reply_text(f"{hey}")
            elif message.reply_to_message.from_user.id == client.me.id:
                await client.send_chat_action(message.chat.id, ChatAction.TYPING)
                K = []
                is_chat = chatai.find({"word": message.text})
                k = chatai.find_one({"word": message.text})
                if k:
                    for x in is_chat:
                        K.append(x["text"])
                    hey = random.choice(K)
                    is_text = chatai.find_one({"text": hey})
                    Yo = is_text["check"]
                    if Yo == "sticker":
                        await message.reply_sticker(f"{hey}")
                    else:
                        await message.reply_text(f"{hey}")
            elif message.reply_to_message.text:
                if message.sticker:
                    is_chat = chatai.find_one(
                        {"word": message.reply_to_message.text, "id": message.sticker.file_unique_id}
                    )
                    if not is_chat:
                        chatai.insert_one(
                            {
                                "word": message.reply_to_message.text,
                                "text": message.sticker.file_id,
                                "check": "sticker",
                                "id": message.sticker.file_unique_id,
                            }
                        )
                elif message.text:
                    is_chat = chatai.find_one(
                        {"word": message.reply_to_message.text, "text": message.text}
                    )
                    if not is_chat:
                        chatai.insert_one(
                            {
                                "word": message.reply_to_message.text,
                                "text": message.text,
                                "check": "none",
                            }
                        )
    except Exception as e:
        logger.error(f"Error in chatbot_text: {e}")
    finally:
        if chatdb:
            chatdb.close()
        if vickdb:
            vickdb.close()

@VenomX.on_message(
    (filters.sticker | filters.group | filters.text) & ~filters.private & ~filters.bot, group=4
)
async def chatbot_sticker(client: Client, message: Message):
    chatdb = None
    vickdb = None
    try:
        if message.text and (
            message.text.startswith("!") or
            message.text.startswith("/") or
            message.text.startswith("?") or
            message.text.startswith("@") or
            message.text.startswith("#")
        ):
            return
        chatdb = MongoClient(MONGO_URL)
        chatai = chatdb["Word"]["WordDb"]
        vickdb = MongoClient(MONGO_URL)
        vick = vickdb["VickDb"]["Vick"]
        is_vick = vick.find_one({"chat_id": message.chat.id})

        if not is_vick:
            if not message.reply_to_message:
                await client.send_chat_action(message.chat.id, ChatAction.TYPING)
                K = []
                is_chat = chatai.find({"word": message.sticker.file_unique_id})
                k = chatai.find_one({"word": message.sticker.file_unique_id})
                if k:
                    for x in is_chat:
                        K.append(x["text"])
                    hey = random.choice(K)
                    is_text = chatai.find_one({"text": hey})
                    Yo = is_text["check"]
                    if Yo == "text":
                        await message.reply_text(f"{hey}")
                    else:
                        await message.reply_sticker(f"{hey}")
            elif message.reply_to_message.from_user.id == client.me.id:
                await client.send_chat_action(message.chat.id, ChatAction.TYPING)
                K = []
                is_chat = chatai.find({"word": message.sticker.file_unique_id})
                k = chatai.find_one({"word": message.sticker.file_unique_id})
                if k:
                    for x in is_chat:
                        K.append(x["text"])
                    hey = random.choice(K)
                    is_text = chatai.find_one({"text": hey})
                    Yo = is_text["check"]
                    if Yo == "text":
                        await message.reply_text(f"{hey}")
                    else:
                        await message.reply_sticker(f"{hey}")
            elif message.reply_to_message.sticker:
                if message.text:
                    is_chat = chatai.find_one(
                        {"word": message.reply_to_message.sticker.file_unique_id, "text": message.text}
                    )
                    if not is_chat:
                        chatai.insert_one(
                            {
                                "word": message.reply_to_message.sticker.file_unique_id,
                                "text": message.text,
                                "check": "text",
                            }
                        )
                elif message.sticker:
                    is_chat = chatai.find_one(
                        {"word": message.reply_to_message.sticker.file_unique_id, "text": message.sticker.file_id}
                    )
                    if not is_chat:
                        chatai.insert_one(
                            {
                                "word": message.reply_to_message.sticker.file_unique_id,
                                "text": message.sticker.file_id,
                                "check": "none",
                            }
                        )
    except Exception as e:
        logger.error(f"Error in chatbot_sticker: {e}")
    finally:
        if chatdb:
            chatdb.close()
        if vickdb:
            vickdb.close()

@VenomX.on_message(
    (filters.text | filters.sticker | filters.group) & ~filters.private & ~filters.bot, group=4
)
async def chatbot_pvt(client: Client, message: Message):
    chatdb = None
    try:
        if message.text and (
            message.text.startswith("!") or
            message.text.startswith("/") or
            message.text.startswith("?") or
            message.text.startswith("@") or
            message.text.startswith("#")
        ):
            return
        chatdb = MongoClient(MONGO_URL)
        chatai = chatdb["Word"]["WordDb"]
        if not message.reply_to_message:
            await client.send_chat_action(message.chat.id, ChatAction.TYPING)
            K = []
            is_chat = chatai.find({"word": message.text})
            for x in is_chat:
                K.append(x["text"])
            if K:
                hey = random.choice(K)
                is_text = chatai.find_one({"text": None})
                Yo = is_text["check"]
                if Yo == "sticker":
                    await message.reply_sticker(f"{hey}")
                else:
                    await message.reply_text(f"{hey}")
        elif message.reply_to_message.from_user.id == client.me.id:
            await client.send_chat_action(message.chat.id, ChatAction.TYPING)
            K = []
            is_chat = chatai.find({"word": message.text})
            for x in is_chat:
                K.append(x["text"])
            if K:
                hey = random.choice(K)
                is_text = chatai.find_one({"text": None})
                Yo = is_text["check"]
                if Yo == "sticker":
                    await message.reply_sticker(f"{hey}")
                else:
                    await message.reply_text(f"{hey}")
    except Exception as e:
        logger.error(f"Error in chatbot_pvt: {e}")
    finally:
        if chatdb:
            chatdb.close()

@VenomX.on_message(
    (filters.sticker | filters.group) & ~filters.private & ~filters.bot, group=4
)
async def chatbot_sticker_pvt(client: Client, message: Message):
    chatdb = None
    try:
        if message.text and (
            message.text.startswith("!") or
            message.text.startswith("/") or
            message.text.startswith("?") or
            message.text.startswith("@") or
            message.text.startswith("#")
        ):
            return
        chatdb = MongoClient(MONGO_URL)
        chatai = chatdb["Word"]["WordDb"]
        if not message.reply_to_message:
            await client.send_chat_action(message.chat.id, ChatAction.TYPING)
            K = []
            is_chat = chatai.find({"word": message.sticker.file_unique_id})
            for x in is_chat:
                K.append(x["text"])
            if K:
                hey = random.choice(K)
                is_text = chatai.find_one({"text": hey})
                Yo = is_text["check"]
                if Yo == "text":
                    await message.reply_text(f"{hey}")
                else:
                    await message.reply_sticker(f"{hey}")
        elif message.reply_to_message.from_user.id == client.me.id:
            await client.send_chat_action(message.chat.id, ChatAction.TYPING)
            K = []
            is_chat = chatai.find({"word": message.sticker.file_unique_id})
            for x in is_chat:
                K.append(x["text"])
            if K:
                hey = random.choice(K)
                is_text = chatai.find_one({"text": hey})
                Yo = is_text["check"]
                if Yo == "text":
                    await message.reply_text(f"{hey}")
                else:
                    await message.reply_sticker(f"{hey}")
    except Exception as e:
        logger.error(f"Error in chatbot_sticker_pvt: {e}")
    finally:
        if chatdb:
            chatdb.close()
